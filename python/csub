#!/usr/bin/env python

# bsub-like interface to condor

import os
import sys
import argparse
import string
import time
timestamp = str(int(time.time()))

parser = argparse.ArgumentParser(description = 'Dijet mass spectrum fits')
parser.add_argument('script', type=str, help='Script to execute')
parser.add_argument('-f', '--file_list', type=str, help='Text file listing files to transfer (newline-separated)')
parser.add_argument('-m', '--mem', type=int, default=3000, help='Memory requirement (MB)')
parser.add_argument('-l', '--log', type=str, help="Log file name")
parser.add_argument('-s', '--submit_file', type=str, help="Submission file name")
parser.add_argument('-e', '--env', type=str, help="Environment variables to carry to worker node")
parser.add_argument('-d', '--working_directory', type=str, help="Working directory on submission node")
parser.add_argument('-n', '--queue_n', type=int, default=1, help="Queue n jobs")
parser.add_argument('--no_submit', action='store_true', help="Prepare jobs but don't submit")
parser.add_argument('--cmssw', action='store_true', help='Transfer CMSSW libraries as a tarball')
parser.add_argument('--cmssw_src', action='store_true', help='Transfer CMSSW src as a tarball, and compile on worker node')
parser.add_argument('--no_retar', action='store_true', help='Use existing tarball')
args = parser.parse_args()

script_path = os.path.realpath(args.script)

starting_directory = os.getcwd()
if args.working_directory:
	os.system("mkdir -pv " + args.working_directory)
	os.chdir(args.working_directory)

# Make list of files to transfer to worker node
files_to_transfer = [script_path]

if args.cmssw_src:
	if not args.no_retar:
		tar_command = "tar -czf /uscms/home/dryu/nobackup/src.tar.gz -C $CMSSW_BASE/src . --exclude=*/test/crab --exclude=*/gen/crab --exclude=*/skim/crab --exclude=*/test/condor --exclude=*/.git*"
		os.system(tar_command)
	files_to_transfer.append("/uscms/home/dryu/nobackup/src.tar.gz")

if args.cmssw:
	if not args.no_retar:
		tar_command = "tar -czf /uscms/home/dryu/nobackup/cmssw.tar.gz -C $CMSSW_BASE . --exclude=*/test/crab --exclude=*/gen/crab --exclude=*/skim/crab --exclude=*/test/condor --exclude=*/.git*"
		os.system(tar_command)
	files_to_transfer.append("/uscms/home/dryu/nobackup/cmssw.tar.gz")

if args.file_list:
	file_list_txt = open(args.file_list)
	for line in file_list_txt:
		files_to_transfer.append(line.rstrip())

env_to_transfer = {}
if args.cmssw or args.cmssw_src:
	env_to_transfer["CMSSW_VERSION"] = os.path.expandvars("$CMSSW_VERSION")
if args.env:
	for this_env in args.env.split(","):
		env_to_transfer[this_env] = os.path.expandvars("$" + this_env)

# Make top-level script
top_script_name = "condor_run_" + timestamp + ".sh"
top_script = open(top_script_name, 'w')
top_script.write("#!/bin/bash\n")
for env_name, env_value in env_to_transfer.iteritems():
	top_script.write("export " + env_name + "=" + env_value)
if args.cmssw_src:
	top_script.write("source /cvmfs/cms.cern.ch/cmsset_default.sh\n")
	top_script.write("tar -xzf src.tar.gz -C $CMSSW_VERSION/src\n")
	top_script.write("cd $CMSSW_VERSION/src\n")
	top_script.write("cmsenv\n")
	top_script.write("scram b -j8\n")
	top_script.write("cd -\n")
if args.cmssw:
	top_script.write("source /cvmfs/cms.cern.ch/cmsset_default.sh\n")
	top_script.write("tar -xzf cmssw.tar.gz -C $CMSSW_VERSION\n")
	top_script.write("cd $CMSSW_VERSION/src\n")
	top_script.write("cmsenv\n")
	top_script.write("cd -\n")
top_script.write("source " + os.path.basename(args.script) + "\n")
top_script.close()
files_to_transfer.append(top_script_name)

# Make submission script
if args.submit_file:
	submission_file_name = args.submit_file
else:
	submission_file_name = "condor_submit_" + timestamp + ".sh"
submission_file = open(submission_file_name, 'w')
submission_file.write("executable = " + top_script_name + "\n")
submission_file.write("request_memory = " + str(args.mem) + "\n")
submission_file.write("transfer_executable = true\n")
submission_file.write("notification = never\n")
submission_file.write("getenv = false\n")
submission_file.write("use_x509userproxy = true\n")
submission_file.write("should_transfer_files = yes\n")
submission_file.write("transfer_input_files=" + string.join(files_to_transfer,",") + "\n")
submission_file.write("when_to_transfer_output = on_exit\n")
if args.log:
	log_stdout = args.log + ".$(Cluster).$(Process).stdout"
	log_stderr = args.log + ".$(Cluster).$(Process).stderr"
	log_condor = args.log + ".$(Cluster).$(Process).condor"
else:
	log_stdout = "log_" + timestamp + "_$(Cluster).$(Process).stdout"
	log_stderr = "log_" + timestamp + "_$(Cluster).$(Process).stderr"
	log_condor = "log_" + timestamp + "_$(Cluster).$(Process).condor"
submission_file.write("output = " + log_stdout + "\n")
submission_file.write("error = " + log_stderr + "\n")
submission_file.write("log = " + log_condor + "\n")
submission_file.write("\nqueue " + str(args.queue_n) + "\n")
submission_file.close()

if not args.no_submit:
	print "Submitting condor jobs...",
	os.system("condor_submit " + submission_file_name)
	print "done."

os.chdir(starting_directory)
